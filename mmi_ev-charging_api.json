{
  "openapi": "3.0.1",
  "info": {
    "title": "MapmyIndia Electric Vehicle & Charging Station APIs",
    "description": "<p><img alt=\"Charging Topology\" src=\"https://raw.githubusercontent.com/exploremapmyindia/eMSP/master/charging_topology.PNG\" height=350 width=700></p><p><i>Figure: Charging Topology schematic</i></p><h2>Security Type</h2> <p>This APIs follow OAuth2 based security. <b>To know more on how to create your authorization tokens, please click the `Authorize` button below. More details available <a href=https://www.mapmyindia.com/api/advanced-maps/doc/authentication-api.php>here</a></b> </br><li><a href=https://www.mapmyindia.com/api/login>Login/Sign Up</a> for API key and other access.<p></br>",
    "termsOfService": "https://www.mapmyindia.com/api/terms-&-conditions",
    "contact": {
      "name": "MapmyIndia API Support",
      "url": "https://www.mapmyindia.com/api/#f_cont",
      "email": "apisupport@mapmyindia.com"
    },
    "version": "v2.2"
  },
  "externalDocs": {
    "description": "Find out more about MapmyIndia APIs",
    "url": "https://www.mapmyindia.com/api/advanced-maps/doc/interactive-map-api"
  },
  "servers": [
    {
      "url": "http://explore-uat.mapmyindia.in/api",
      "description": "UAT"
    },
    {
      "url": "http://exp.mapmyindia.in/api",
      "description": "PreProd"
    },
    {
      "url": "https://explore.mapmyindia.com/api",
      "description": "Prod"
    }
  ],
  "tags": [
    {
      "name": "Location",
      "description": "Module contains APIs related to charging station data along with machines-connectors information & status."
    },
    {
      "name": "Session",
      "description": "Module contains APIs related to ongoing session along with start, stop and status of the session. The information is dynamic."
    },
    {
      "name": "CDR",
      "description": "Module contains APIs related to \"Charging Detail Record\" (i.e. description of a concluded charging session)."
    },
    {
      "name": "Tariff",
      "description": "Module contains APIs related to Tariff Data which includes Pricing, Taxes, Cost(Energy, Parking etc.)"
    }
  ],
  "paths": {
    "/{version}/locations/{connector_id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Fetch a specific Connector.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "Id of the Connector object to retrieve.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connector"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/locations/{location_id}/{evse_id}/{connector_id}": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create new/updated Connector.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Id of the Location object to push.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_id",
            "in": "path",
            "description": "Id of the EVSE object to push.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "Id of the Connector object to push.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "EVSE Request Body to push.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Connector"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Update a Connector.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Id of the Location object to update.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_id",
            "in": "path",
            "description": "Id of the EVSE object to update.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "Id of the Connector object to update.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "Connector Request Body to update.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Connector"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/locations/{evse_id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Fetch a specific EVSE.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_id",
            "in": "path",
            "description": "Id of the EVSE object to retrieve.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVSE"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/locations/{location_id}/{evse_id}": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create new/updated EVSE.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Id of the Location object to push.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_id",
            "in": "path",
            "description": "Id of the EVSE object to push.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "EVSE Request Body to push.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EVSE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Update an EVSE.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Id of the Location object to update.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_id",
            "in": "path",
            "description": "Id of the EVSE object to update.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "EVSE Request Body to update.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EVSE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/locations/{location_id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Fetch a specific Location.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Id of the Location object to retrieve.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create new/updated Location.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Id of the Location object to push.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "Location Request Body to push.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Update a Location.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Id of the Location object to update.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "Location Request Body to update.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/locations": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Fetch a list of Locations, last updated between the {date_from} and {date_to} (paginated).",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "Only return Locations that have last_updated after or equal to this Date/Time (inclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "Only return Locations that have last_updated up to this Date/Time, but not including (exclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the first object returned. Default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of objects to GET.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Location"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/sessions/{session_id}": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Fetch a single session details with Session.id equal to {session_id}.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "Unique Id of the session object to get.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Push a single session details",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "Unique Id of the session object to push.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "Session request body to push.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "$ref": "#/components/schemas/Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "Session"
        ],
        "summary": "Update a single session details.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "Unique Id of the session object to update.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "Session request body to update.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "$ref": "#/components/schemas/Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Updated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/sessions/status": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Session Status.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "query",
            "description": "Unique ID assigned to a session.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionStatus"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/sessions/start": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Start Session.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "Start Session Request Body.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SessionStartBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionStart"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/sessions/stop": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Stop Session.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "Start Session Request Body.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SessionStopBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionStop"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/sessions/rate": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Rate Session.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "Start Session Request Body.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SessionRateBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/sessions": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Fetch list of session details last updated between the {date_from} and {date_to} (paginated).",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "Only return Sessions that have last_updated after or equal to this Date/Time (inclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "Only return Sessions that have last_updated up to this Date/Time, but not including (exclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the first object returned. Default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of objects to GET.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Session"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/sessions/{session_id}/preference": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Set/update the driver's Charging Preferences for this charging session.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "Unique Id of the ongoing session.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "Charging Preference Request Body.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChargingPreferences"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingPreferencesResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/cdrs/{id}": {
      "get": {
        "tags": [
          "CDR"
        ],
        "summary": "Fetch a single CDR with CDR {id}.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique Id of the CDR object to get.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CDR"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/cdrs": {
      "post": {
        "tags": [
          "CDR"
        ],
        "summary": "Push a single CDR.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "Session request body to push.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "$ref": "#/components/schemas/CDR"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "URL",
                  "example": "https://www.server.com/mmi/2.2/cdrs/123456"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "get": {
        "tags": [
          "CDR"
        ],
        "summary": "Fetch list of CDRs last updated between the {date_from} and {date_to} (paginated).",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "Only return CDRs that have last_updated after or equal to this Date/Time (inclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "Only return CDRs that have last_updated up to this Date/Time, but not including (exclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the first object returned. Default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of objects to GET.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CDR"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/tariffs/{tariff_id}": {
      "get": {
        "tags": [
          "Tariff"
        ],
        "summary": "Fetch a single Tariff with {tariff_id}.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tariff_id",
            "in": "path",
            "description": "Unique Id of the Tariff object to get.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tariff"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "Tariff"
        ],
        "summary": "Push a single Tariff Data.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tariff_id",
            "in": "path",
            "description": "Unique Id of the Tariff object to get.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "header",
            "description": "Tariff request body to push.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "$ref": "#/components/schemas/Tariff"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Tariff"
        ],
        "summary": "Remove a single Tariff Data.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tariff_id",
            "in": "path",
            "description": "Unique Id of the Tariff object to get.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/{version}/tariffs": {
      "get": {
        "tags": [
          "Tariff"
        ],
        "summary": "Fetch list of Tariff objects last updated between the {date_from} and {date_to} (paginated).",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "Only return Tariff that have last_updated after or equal to this Date/Time (inclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "Only return Tariff that have last_updated up to this Date/Time, but not including (exclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the first object returned. Default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of objects to GET.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Tariff"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Location": {
        "description": "The Location object describes the location and its properties where a group of EVSEs that belong together are installed. Typically, the Location object is the exact location of the group of EVSEs, but it can also be the entrance of a parking garage which contains these EVSEs. The exact way to reach each EVSE can be further specified by its own properties.",
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "example": "IN",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this Location."
          },
          "party_id": {
            "type": "string",
            "example": "INC",
            "description": "CPO ID of the CPO that 'owns' this Location (following the ISO- 15118 standard)."
          },
          "id": {
            "type": "string",
            "example": "LOC1",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms). This field can never be changed, modified or renamed."
          },
          "name": {
            "type": "string",
            "description": "Display name of the location.",
            "example": "Delta Charger"
          },
          "address": {
            "type": "string",
            "description": "Street/block name and house number if available.",
            "example": "Block G, Minto Road"
          },
          "city": {
            "type": "string",
            "description": "City or town",
            "example": "New Delhi"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways donâ€™t have postal codes.",
            "example": "110055"
          },
          "state": {
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "example": "Delhi"
          },
          "country": {
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "IND"
          },
          "coordinates": {
            "description": "Coordinates of the location.",
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoLocation"
              }
            ]
          },
          "AddressTokens": {
            "$ref": "#/components/schemas/MMI-AdditionalAddressTokens"
          },
          "parking_type": {
            "description": "The general type of parking at the charge point location.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ParkingType"
              }
            ]
          },
          "evses": {
            "type": "array",
            "description": "List of EVSEs that belong to this Location.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EVSE"
                }
              ]
            }
          },
          "operator": {
            "description": "Information of the operator. When not specified, the information retrieved from the Credentials module should be used instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetails"
              }
            ]
          },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongs to.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Facility"
                }
              ]
            }
          },
          "time_zone": {
            "type": "string",
            "description": "Representing the time zone of the location.",
            "example": "IST(GMT+5:30)"
          },
          "opening_times": {
            "description": "The times when the EVSEs at the location can be accessed for charging.",
            "type": "array",
            "items": {
              "properties": {
                "icon": {
                  "type": "string",
                  "example": "ic_timings.png"
                },
                "title": {
                  "type": "string",
                  "example": "Timings"
                },
                "value": {
                  "type": "string",
                  "example": "10:00 AM to 11:00 PM"
                }
              }
            }
          },
          "AdditionalInfo": {
            "$ref": "#/components/schemas/MMI-AdditionalInfo"
          },
          "images": {
            "description": "Links to images related to the location such as photos or logos.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Image"
              }
            ]
          },
          "last_updated": {
            "type": "string",
            "format": "DateTime",
            "description": "Timestamp when this Location or one of its EVSEs or Connectors were last updated (or created).",
            "example": "2015-06-29T20:39:09"
          }
        }
      },
      "EVSE": {
        "type": "object",
        "description": "The EVSE object describes the part that controls the power supply to a single EV in a single session. It always belongs to a Location object. The object only contains directions to get from the location itself to the EVSE (i.e. floor, physical_reference or directions). When the directional properties of an EVSE are insufficient to reach the EVSE from the Location point, then it typically indicates that the EVSE should be put in a different Location object (sometimes with the same address but with different coordinates/directions). An EVSE object has a list of Connectors which can not be used simultaneously: only one connector per EVSE can be used at the time.",
        "properties": {
          "evse_id": {
            "type": "string",
            "example": "BE*BEC*E041503001",
            "description": "Unique EVSE ID, if an evse_id is to be re-used in the real world, the evse_id can be removed from an EVSE object if the status is set to REMOVED."
          },
          "status": {
            "description": "Indicates the current status of the EVSE.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ]
          },
          "status_schedule": {
            "description": "Indicates a planned status update of the EVSE",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusSchedule"
              }
            ]
          },
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Connector"
                }
              ]
            }
          },
          "images": {
            "description": "Links to images related to the EVSE such as photos or logos.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Image"
              }
            ]
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this EVSE or one of its Connectors was last updated (or created).",
            "format": "DateTime",
            "example": "2015-06-29T20:39:09"
          }
        }
      },
      "Connector": {
        "description": "A Connector is the socket or cable and plug available for the EV to use. A single EVSE may provide multiple Connectors but only one of them can be in use at the same time. A Connector always belongs to an EVSE object.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the Connector within the EVSE. Two Connectors may have the same id as long as they do not belong to the same EVSE object.",
            "example": "1"
          },
          "standard": {
            "description": "The standard of the installed connector.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorType"
              }
            ]
          },
          "format": {
            "description": "The format (socket/cable) of the installed connector.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorFormat"
              }
            ]
          },
          "power_type": {
            "$ref": "#/components/schemas/PowerType"
          },
          "max_voltage": {
            "type": "integer",
            "description": "Maximum voltage of the connector (line to neutral for AC_3_PHASE), in volt [V]. For example: DC Chargers might vary the voltage during charging when battery almost full.",
            "example": 920
          },
          "max_amperage": {
            "type": "integer",
            "description": "Maximum amperage of the connector, in ampere [A].",
            "example": 400
          },
          "max_electric_power": {
            "type": "integer",
            "description": "Maximum electric power that can be delivered by this connector, in Watts (W). When the maximum electric power is lower than the calculated value from voltage and amperage, this value should be set. For example: A DC Charge Point which can delivers up to 920V and up to 400A can be limited to a maximum of 150kW (max_electric_power = 150000). Depending on the car, it may supply max voltage or current, but not both at the same time. For AC Charge Points, the amount of phases used can also have influence on the maximum power.",
            "example": 150000
          },
          "tariff_ids": {
            "type": "string",
            "description": "Identifiers of the currently valid charging tariffs. Multiple tariffs are possible, but only one of each Tariff.type can be active at the same time. Tariffs with the same type are only allowed if they are not active at the same time: start_date_time and end_date_time period not overlapping. When preference-based smart charging is supported, one tariff for every possible ProfileType should be provided. These tell the user about the options they have at this Connector, and what the tariff is for every option. For a \"free of charge\" tariff, this field should be set and point to a defined \"free of charge\" tariff.",
            "example": 12
          },
          "terms_and_conditions": {
            "type": "string",
            "format": "URL",
            "description": "URL to the operatorâ€™s terms and conditions.",
            "example": "www.deltacharging.com/terms_and_conditions"
          },
          "last_updated": {
            "type": "string",
            "format": "DateTime",
            "example": "2015-06-29T20:39:09",
            "description": "Timestamp when this Connector was last updated (or created)."
          }
        }
      },
      "Session": {
        "type": "object",
        "description": "The Session object describes one charging session. That doesnâ€™t mean it is required that energy has been transferred between EV and the Charge Point. It is possible that the EV never took energy from the Charge Point because it was instructed not to take energy by the driver. But as the EV was connected to the Charge Point, some form of start tariff, park tariff or reservation cost might be relevant.",
        "properties": {
          "country_code": {
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that \"owns\" this Session.",
            "example": "IN"
          },
          "party_id": {
            "type": "string",
            "description": "CPO ID of the CPO that \"owns\" this Session (following the ISO-15118 standard).",
            "example": "CPO1"
          },
          "id": {
            "type": "string",
            "description": "The unique id that identifies the charging session in the CPO platform.",
            "example": "id11"
          },
          "start_date_time": {
            "type": "string",
            "format": "DateTime",
            "example": "2019-12-29T17:45:09.2",
            "description": "The timestamp when the session became ACTIVE in the Charge Point. When the session is still PENDING, this field SHALL be set to the time the Session was created at the Charge Point. When a Session goes from PENDING to ACTIVE, this field SHALL be update to the moment the Session went to ACTIVE in the Charge Point."
          },
          "end_date_time": {
            "type": "string",
            "format": "DateTime",
            "example": "2019-12-29T19:45:09.2",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid. "
          },
          "kwh": {
            "type": "number",
            "example": 2,
            "description": "How many kWh were charged."
          },
          "cdr_token": {
            "description": "Token used to start this charging session, including all the relevant information to identify the unique token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CdrToken"
              }
            ]
          },
          "location_id": {
            "type": "string",
            "description": "Id of the Location object of this CPO, on which the charging session is/was happening.",
            "example": "LOC1"
          },
          "evse_id": {
            "type": "string",
            "example": 123,
            "description": "id of the EVSE of this Location on which the charging session is/was happening."
          },
          "connector_id": {
            "type": "string",
            "example": 12,
            "description": "Id of the Connector of this Location the charging session is/was happening."
          },
          "meter_id": {
            "type": "string",
            "example": 111,
            "description": "Optional identification of the kWh meter."
          },
          "currency": {
            "type": "string",
            "example": "INR",
            "description": "ISO 4217 code of the currency used for this session."
          },
          "charging_periods": {
            "type": "array",
            "description": "An optional list of Charging Periods that can be used to calculate and verify the total cost.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ChargingPeriod"
                }
              ]
            }
          },
          "total_cost": {
            "description": "The total cost of the session in the specified currency. This is the price that the eMSP will have to pay to the CPO. A total_cost of 0.00 means free of charge. When omitted, i.e. no price information is given in the Session object, it does not imply the session is/was free of charge.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ]
          },
          "status": {
            "description": "The status of the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionStatus"
              }
            ]
          },
          "last_updated": {
            "description": "Timestamp when this Session was last updated (or created).",
            "type": "string",
            "example": "2020-01-01T01:08:01.123"
          }
        }
      },
      "CDR": {
        "type": "object",
        "description": "The CDR object describes the charging session and its costs, how these costs are composed, etc. The CDR object is different from the Session object. The Session object is dynamic as it reflects the current state of the charging session. The information is meant to be viewed by the driver while the charging session is ongoing. The CDR on the other hand can be thought of as sealed, preserving the information valid at the moment in time the underlying session was started. This is a requirement of the main use case for CDRs, namely invoicing.",
        "properties": {
          "country_code": {
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that \"owns\" this Session.",
            "example": "IN"
          },
          "party_id": {
            "type": "string",
            "description": "CPO ID of the CPO that \"owns\" this Session (following the ISO-15118 standard).",
            "example": "CPO1"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the CDR within the CPOâ€™s platform (and suboperator platforms). This field is longer than the usual 36 characters to allow for credit CDRs to have something appended to the original ID. Normal (non-credit) CDRs SHALL only have an ID with a maximum length of 36.",
            "example": "id11"
          },
          "start_date_time": {
            "type": "string",
            "format": "DateTime",
            "example": "2019-12-29T17:45:09.2",
            "description": "The timestamp when the session became ACTIVE in the Charge Point. When the session is still PENDING, this field SHALL be set to the time the Session was created at the Charge Point. When a Session goes from PENDING to ACTIVE, this field SHALL be update to the moment the Session went to ACTIVE in the Charge Point."
          },
          "end_date_time": {
            "type": "string",
            "format": "DateTime",
            "example": "2019-12-29T19:45:09.2",
            "description": "The timestamp when the session was completed/finished, charging might have finished before the session ends, for example: EV is full, but parking cost also has to be paid. "
          },
          "session_id": {
            "type": "string",
            "description": "Unique ID of the Session for which this CDR is sent. Is only allowed to be omitted when the CPO has not implemented the Sessions module or this CDR is the result of a reservation that never became a charging session, thus no OCPI Session.",
            "example": 123
          },
          "cdr_token": {
            "description": "Token used to start this charging session, including all the relevant information to identify the unique token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CdrToken"
              }
            ]
          },
          "cdr_location": {
            "description": "Location where the charging session took place, including only the relevant EVSE and Connector.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CdrLocation"
              }
            ]
          },
          "meter_id": {
            "type": "string",
            "example": 111,
            "description": "Optional identification of the kWh meter."
          },
          "currency": {
            "type": "string",
            "example": "INR",
            "description": "ISO 4217 code of the currency used for this session."
          },
          "tariff": {
            "description": "List of relevant Tariff Elements, see: Tariff. When relevant, a Free of Charge tariff should also be in this list, and point to a defined Free of Charge Tariff.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tariff"
            }
          },
          "charging_periods": {
            "type": "array",
            "description": "An optional list of Charging Periods that can be used to calculate and verify the total cost.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ChargingPeriod"
                }
              ]
            }
          },
          "signed_data": {
            "description": "Signed data that belongs to this charging Session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SignedData"
              }
            ]
          },
          "total_cost": {
            "description": "Total sum of all the costs of this transaction in the specified currency.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ]
          },
          "total_fixed_cost": {
            "description": "Total sum of all the fixed costs in the specified currency, except fixed price components of parking and reservation. The cost not depending on amount of time/energy used etc. Can contain costs like a start tariff.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ]
          },
          "total_energy": {
            "description": "Total energy charged, in kWh.",
            "type": "number"
          },
          "total_energy_cost": {
            "description": "Total sum of all the cost of all the energy used, in the specified currency.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ]
          },
          "total_time": {
            "description": "Total duration of the charging session (including the duration of charging and not charging), in hours.",
            "type": "number"
          },
          "total_time_cost": {
            "description": "Total sum of all the cost related to duration of charging during this transaction, in the specified currency.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ]
          },
          "total_parking_time": {
            "description": "Total duration of the charging session where the EV was not charging (no energy was transferred between EVSE and EV), in hours.",
            "type": "number"
          },
          "total_parking_cost": {
            "description": "Total sum of all the cost related to parking of this transaction, including fixed price components, in the specified currency.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ]
          },
          "total_reservation_cost": {
            "description": "Total sum of all the cost related to a reservation of a Charge Point, including fixed price components, in the specified currency.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ]
          },
          "remark": {
            "description": "Optional remark, can be used to provide additional human readable information to the CDR, for example: reason why a transaction was stopped.",
            "type": "string"
          },
          "invoice_reference_id": {
            "type": "string",
            "description": "This field can be used to reference an invoice, that will later be send for this CDR. Making it easier to link a CDR to a given invoice. Maybe even group CDRs that will be on the same invoice."
          },
          "credit": {
            "description": "When set to true, this is a Credit CDR, and the field credit_reference_id needs to be set as well.",
            "type": "boolean"
          },
          "credit_reference_id": {
            "description": "Is required to be set for a Credit CDR. This SHALL contain the id of the CDR for which this is a Credit CDR.",
            "type": "string"
          },
          "last_updated": {
            "description": "Timestamp when this CDR was last updated (or created).",
            "type": "string",
            "format": "DateTime"
          }
        }
      },
      "Tariff": {
        "type": "object",
        "description": "A Tariff object consists of a list of one or more Tariff Elements, which can be used to create complex Tariff structures.",
        "properties": {
          "country_code": {
            "type": "string",
            "description": "ISO-3166 alpha-2 country code of the CPO that owns this Tariff.",
            "example": "IN"
          },
          "party_id": {
            "type": "string",
            "description": "CPO ID of the CPO that owns this Tariff.",
            "example": 1234
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the tariff within the CPOâ€™s platform (and suboperator platforms).",
            "example": 12
          },
          "currency": {
            "description": "ISO-4217 code of the currency of this tariff.",
            "type": "string",
            "example": "INR"
          },
          "type": {
            "description": "Defines the type of the tariff. This allows for distinction in case of given Charging Preferences. When omitted, this tariff is valid for all sessions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TariffType"
              }
            ]
          },
          "tariff_alt_text": {
            "description": "List of multi-language alternative tariff info texts.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayText"
              }
            ]
          },
          "tariff_alt_url": {
            "description": "URL to a web page that contains an explanation of the tariff information in human readable form.",
            "type": "string"
          },
          "min_price": {
            "description": "When this field is set, a Charging Session with this tariff will at least cost this amount. This is different from a FLAT fee (Start Tariff, Transaction Fee), as a FLAT fee is a fixed amount that has to be paid for any Charging Session. A minimum price indicates that when the cost of a Charging Session is lower than this amount, the cost of the Session will be equal to this amount. (Also see note below)",
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ]
          },
          "max_price": {
            "description": "When this field is set, a Charging Session with this tariff will not cost more than this amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Price"
              }
            ]
          },
          "elements": {
            "description": "List of Tariff Elements.",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TariffElement"
                }
              ]
            }
          },
          "start_date_time": {
            "type": "string",
            "format": "DateTime",
            "description": "The time when this tariff becomes active, in UTC, time_zone field of the Location can be used to convert to local time. Typically used for a new tariff that is already given with the location, before it becomes active."
          },
          "end_date_time": {
            "type": "string",
            "format": "DateTime",
            "description": "The time after which this tariff is no longer valid, in UTC, time_zone field if the Location can be used to convert to local time. Typically used when this tariff is going to be replaced with a different tariff in the near future."
          },
          "energy_mix": {
            "description": "Details on the energy supplied with this tariff.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnergyMix"
              }
            ]
          },
          "last_updated": {
            "description": "Timestamp when this Tariff was last updated (or created).",
            "type": "string",
            "format": "DateTime"
          }
        }
      },
      "TariffElement": {
        "type": "object",
        "properties": {
          "price_components": {
            "description": "List of price components that describe the pricing of a tariff.",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PriceComponent"
                }
              ]
            }
          },
          "restrictions": {
            "description": "Restrictions that describe the applicability of a tariff.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TariffRestrictions"
              }
            ]
          }
        }
      },
      "TariffRestrictions": {
        "type": "object",
        "description": "These restrictions are not for the entire Charging Session. They only describe if and when a TariffElement becomes active or inactive during a Charging Session.",
        "properties": {
          "start_time": {
            "type": "string",
            "description": "Start time of day in local time, the time zone is defined in the time_zone field of the Location. Must be in 24h format with leading zeros. Hour/Minute separator: \":\" Regex: ([0-1][0- 9]|2[0-3]):[0-5][0-9]",
            "example": 790
          },
          "end_time": {
            "type": "string",
            "description": "End time of day in local time, the time zone is defined in the time_zone field of the Location. Same syntax as start_time. If end_time < start_time then the period wraps around to the next day. To stop at end of the day use: 00:00.",
            "example": 840
          },
          "start_date": {
            "type": "string",
            "description": "Start date in local time, the time zone is defined in the time_zone field of the Location. Regex: ([12][0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])",
            "example": "2015-12-24"
          },
          "end_date": {
            "type": "string",
            "description": "End date in local time, the time zone is defined in the time_zone field of the Location. Same syntax as start_date.",
            "example": "2015-12-27"
          },
          "min_kwh": {
            "type": "number",
            "description": "Minimum consumed energy in kWh, for example 20, valid from this amount of energy (inclusive) being used."
          },
          "max_kwh": {
            "description": "Maximum consumed energy in kWh, for example 50, valid until this amount of energy (exclusive) being used.",
            "type": "number"
          },
          "min_current": {
            "description": "Sum of the minimum current (in Amperes) over all phases, for example 5. When the EV is charging with more than, or equal to, the defined amount of current, this TariffElement is/becomes active. If the charging current is or becomes lower, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the minimum current over the entire Charging Session. This restriction can make a TariffElement become active when the charging current is above the defined value, but the TariffElement MUST no longer be active when the charging current drops below the defined value.",
            "type": "number"
          },
          "max_current": {
            "type": "number",
            "description": "Sum of the maximum current (in Amperes) over all phases, for example 20. When the EV is charging with less than the defined amount of current, this TariffElement becomes/is active. If the charging current is or becomes higher, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the maximum current over the entire Charging Session. This restriction can make a TariffElement become active when the charging current is below this value, but the TariffElement MUST no longer be active when the charging current raises above the defined value."
          },
          "min_power": {
            "type": "number",
            "description": "Minimum power in kW, for example 5. When the EV is charging with more than, or equal to, the defined amount of power, this TariffElement is/becomes active. If the charging power is or becomes lower, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the minimum power over the entire Charging Session. This restriction can make a TariffElement become active when the charging power is above this value, but the TariffElement MUST no longer be active when the charging power drops below the defined value."
          },
          "max_power": {
            "type": "number",
            "description": "Maximum power in kW, for example 20. When the EV is charging with less than the defined amount of power, this TariffElement becomes/is active. If the charging power is or becomes higher, this TariffElement is not or no longer valid and becomes inactive. This describes NOT the maximum power over the entire Charging Session. This restriction can make a TariffElement become active when the charging power is below this value, but the TariffElement MUST no longer be active when the charging power raises above the defined value."
          },
          "min_duration": {
            "type": "integer",
            "description": "Minimum duration in seconds the Charging Session must last (inclusive). When the duration of a Charging Session is longer than the defined value, this TariffElement is or becomes active. Before that moment, this TariffElement is not yet active."
          },
          "max_duration": {
            "type": "integer",
            "description": "Maximum duration in seconds the Charging Session MUST last (exclusive). When the duration of a Charging Session is shorter than the defined value, this TariffElement is or becomes active. After that moment, this TariffElement is no longer active."
          },
          "day_of_week": {
            "description": "Which day(s) of the week this TariffElement is active.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          },
          "reservation": {
            "description": "When this field is present, the TariffElement describes reservation costs. A reservation starts when the reservation is made, and ends when the driver starts charging on the reserved EVSE/Location, or when the reservation expires. A reservation can only have: FLAT and TIME TariffDimensions, where TIME is for the duration of the reservation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReservationRestrictionType"
              }
            ]
          }
        }
      },
      "ReservationRestrictionType": {
        "type": "string",
        "enum": [
          "RESERVATION",
          "RESERVATION_EXPIRES"
        ]
      },
      "DayOfWeek": {
        "type": "string",
        "enum": [
          "MONDAY",
          "TUESDAY",
          "WEDNESDAY",
          "THURSDAY",
          "FRIDAY",
          "SATURDAY",
          "SUNDAY"
        ]
      },
      "PriceComponent": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of tariff dimension.",
            "$ref": "#/components/schemas/TariffDimensionType"
          },
          "price": {
            "description": "Price per unit (excl. VAT) for this tariff dimension.",
            "type": "number"
          },
          "vat": {
            "description": "Applicable VAT percentage for this tariff dimension. If omitted, no VAT is applicable. Not providing a VAT is different from 0% VAT, which would be a value of 0.0 here.",
            "type": "number"
          },
          "step_size": {
            "description": "Minimum amount to be billed. This unit will be billed in this step_size blocks. Amounts that are less then this step_size are rounded up to the given step_size. For example: if type is TIME and step_size has a value of 300, then time will be billed in blocks of 5 minutes. If 6 minutes were used, 10 minutes (2 blocks of step_size) will be billed.",
            "type": "integer"
          }
        }
      },
      "TariffDimensionType": {
        "type": "string",
        "enum": [
          "ENERGY",
          "FLAT",
          "PARKING_TIME",
          "TIME"
        ]
      },
      "TariffType": {
        "type": "string",
        "enum": [
          "AD_HOC_PAYMENT",
          "PROFILE_CHEAP",
          "PROFILE_FAST",
          "PROFILE_GREEN",
          "REGULAR"
        ]
      },
      "ConnectorType": {
        "type": "string",
        "enum": [
          "CHADEMO",
          "DOMESTIC_A",
          "DOMESTIC_B",
          "DOMESTIC_C",
          "DOMESTIC_D",
          "DOMESTIC_E",
          "DOMESTIC_F",
          "DOMESTIC_G",
          "DOMESTIC_H",
          "DOMESTIC_I",
          "DOMESTIC_J",
          "DOMESTIC_K",
          "DOMESTIC_L",
          "IEC_60309_2_single_16",
          "IEC_60309_2_three_16",
          "IEC_60309_2_three_32",
          "IEC_60309_2_three_64",
          "IEC_62196_T1",
          "IEC_62196_T1_COMBO",
          "IEC_62196_T2",
          "IEC_62196_T2_COMBO",
          "IEC_62196_T3A",
          "IEC_62196_T3C",
          "PANTOGRAPH_BOTTOM_ UP",
          "PANTOGRAPH_TOP_DOW N",
          "TESLA_R",
          "TESLA_S"
        ]
      },
      "ConnectorFormat": {
        "description": "The format of the connector, whether it is a socket or a plug.",
        "type": "string",
        "enum": [
          "SOCKET",
          "CABLE"
        ]
      },
      "Capability": {
        "description": "The capabilities of an EVSE.",
        "type": "string",
        "enum": [
          "CHARGING_PROFILE_CAPABLE",
          "CHARGING_PREFERENCES_CAPABLE",
          "CHIP_CARD_SUPPORT",
          "CONTACTLESS_CARD_SUPPORT",
          "CREDIT_CARD_PAYABLE",
          "DEBIT_CARD_PAYABLE",
          "PED_TERMINAL",
          "REMOTE_START_STOP_CAPABLE",
          "RESERVABLE",
          "RFID_READER",
          "TOKEN_GROUP_CAPABLE",
          "UNLOCK_CAPABLE"
        ]
      },
      "PublishTokenType": {
        "type": "object",
        "description": "Defines the set of values that identify a token to which a Location might be published. At least one of the following fields SHALL be set: uid, visual_number, or group_id. When uid is set, type SHALL also be set. When visual_number is set, issuer SHALL also be set.",
        "properties": {
          "uid": {
            "type": "string",
            "example": 12421,
            "description": "Unique ID by which this Token can be identified."
          },
          "type": {
            "description": "Type of the token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenType"
              }
            ]
          },
          "visual_number": {
            "description": "Visual readable number/identification as printed on the Token (RFID card).",
            "type": "string",
            "example": "12345-67"
          },
          "issuer": {
            "description": "Issuing company, most of the times the name of the company printed on the token (RFID card), not necessarily the eMSP.",
            "type": "string",
            "example": "NewMotion"
          },
          "group_id": {
            "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one.",
            "type": "string",
            "example": "123abc"
          }
        }
      },
      "TokenType": {
        "type": "string",
        "enum": [
          "RFID",
          "AD_HOC_USER",
          "APP_USER",
          "OTHER"
        ]
      },
      "GeoLocation": {
        "type": "object",
        "description": "This class defines the geo location of the Charge Point. The geodetic system to be used is WGS 84.",
        "properties": {
          "latitude": {
            "type": "string",
            "example": "51.047599",
            "description": "Latitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,2}\\.[0-9]{5,7}"
          },
          "longitude": {
            "type": "string",
            "example": "3.729944",
            "description": "Longitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,3}\\.[0-9]{5,7}"
          }
        }
      },
      "AdditionalGeoLocation": {
        "type": "object",
        "description": "This class defines an additional geo location that is relevant for the Charge Point. The geodetic system to be used is WGS 84.",
        "properties": {
          "latitude": {
            "type": "string",
            "example": "51.047599",
            "description": "Latitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,2}\\.[0-9]{5,7}"
          },
          "longitude": {
            "type": "string",
            "example": "3.729944",
            "description": "Longitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,3}\\.[0-9]{5,7}"
          }
        }
      },
      "DisplayText": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "example": "en"
          },
          "text": {
            "type": "string",
            "example": "Standard Tariff"
          }
        }
      },
      "ParkingType": {
        "type": "string",
        "enum": [
          "PARKING_LOT",
          "ON_STREET",
          "ALONG_MOTORWAY",
          "PARKING_GARAGE",
          "UNDERGROUND_GARAGE",
          "ON_DRIVEWAY"
        ]
      },
      "BusinessDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the operator.",
            "example": "Delta"
          },
          "website": {
            "type": "string",
            "example": "www.deltacharging.in",
            "description": "Link to the operatorâ€™s website."
          },
          "logo": {
            "description": "Image link to the operatorâ€™s logo.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Image"
              }
            ]
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "url": {
            "description": "URL from where the image data can be fetched through a web browser.",
            "type": "string",
            "example": "www.deltacharging.in/image/abc.png"
          },
          "thumbnail": {
            "type": "string",
            "description": "URL from where a thumbnail of the image can be fetched through a webbrowser.",
            "example": "www.deltacharging.in/image/abcthumbnail.png"
          },
          "category": {
            "description": "Describes what the image is used for.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageCategory"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "Image type like: gif, jpeg, png, svg.",
            "example": "png"
          },
          "width": {
            "type": "integer",
            "description": "Width of the full scale image.",
            "example": 100
          },
          "height": {
            "type": "integer",
            "description": "Height of the full scale image.",
            "example": 50
          }
        }
      },
      "ImageCategory": {
        "type": "string",
        "enum": [
          "CHARGER",
          "ENTRANCE",
          "LOCATION",
          "NETWORK",
          "OPERATOR",
          "OTHER",
          "OWNER"
        ]
      },
      "StatusSchedule": {
        "description": "This type is used to schedule status periods in the future. The eMSP can provide this information to the EV user for trip planning purposes. A period MAY have no end. Example: \"This station will be running as of tomorrow. Today it is still planned and under construction.\"",
        "type": "object",
        "properties": {
          "period_begin": {
            "type": "string",
            "format": "datetime",
            "example": "2015-03-16T10:10:02Z"
          },
          "period_end": {
            "type": "string",
            "format": "datetime",
            "example": "2015-03-18T08:12:01Z"
          },
          "status": {
            "description": "Status value during the scheduled period.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ]
          }
        }
      },
      "Status": {
        "description": "Status of an EVSE",
        "type": "string",
        "enum": [
          "AVAILABLE",
          "BLOCKED",
          "CHARGING",
          "INOPERATIVE",
          "OUTOFORDER",
          "PLANNED",
          "REMOVED",
          "RESERVED",
          "UNKNOWN"
        ]
      },
      "RegularHours": {
        "description": "Regular recurring operation or access hours.",
        "type": "array",
        "items": {
          "properties": {
            "weekday": {
              "type": "integer",
              "description": "Number of day in the week, from Monday (1) till Sunday (7)",
              "example": 1
            },
            "period_begin": {
              "type": "string",
              "description": "Begin of the regular period, in local time, given in hours and minutes. Must be in 24h format with leading zeros. Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9].",
              "example": "08:00"
            },
            "period_end": {
              "type": "string",
              "description": "End of the regular period, in local time, syntax as for period_begin. Must be later than period_begin.",
              "example": "20:00"
            }
          }
        }
      },
      "PowerType": {
        "type": "string",
        "enum": [
          "AC_1_PHASE",
          "AC_3_PHASE",
          "DC"
        ]
      },
      "ParkingRestriction": {
        "type": "string",
        "enum": [
          "EV_ONLY",
          "PLUGGED",
          "DISABLED",
          "CUSTOMERS",
          "MOTORCYCLES"
        ]
      },
      "ExceptionalPeriod": {
        "type": "array",
        "description": "Specifies one exceptional period for opening or access hours.",
        "items": {
          "properties": {
            "period_begin": {
              "type": "string",
              "format": "datetime",
              "description": "Begin of the exception. In UTC, time_zone field can be used to convert to local time.",
              "example": "2015-03-16T10:10:02Z"
            },
            "period_end": {
              "type": "string",
              "format": "datetime",
              "example": "2015-03-18T08:12:01Z",
              "description": "End of the exception. In UTC, time_zone field can be used to convert to local time."
            }
          }
        }
      },
      "Hours": {
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean"
          },
          "regular_hours": {
            "description": "Regular hours, weekday-based. Only to be used if twentyfourseven=false, then this field needs to contain at least one RegularHours object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RegularHours"
              }
            ]
          },
          "exceptional_openings": {
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is operating/accessible. Additional to regular_hours. May overlap regular rules.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExceptionalPeriod"
              }
            ]
          },
          "exceptional_closings": {
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is not operating/accessible. Overwriting regular_hours and exceptional_openings. Should not overlap exceptional_openings.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExceptionalPeriod"
              }
            ]
          }
        }
      },
      "Facility": {
        "type": "string",
        "enum": [
          "HOTEL",
          "RESTAURANT",
          "CAFE",
          "MALL",
          "SUPERMARKET",
          "SPORT",
          "BUS_STOP",
          "TAXI_STAND",
          "METRO_STATION",
          "TRAIN_STATION",
          "AIRPORT",
          "PARKING_LOT",
          "CARPOOL_PARKING",
          "FUEL_STATION",
          "WIFI",
          "PAYTM",
          "SHELTERED",
          "CASH"
        ]
      },
      "EnvironmentalImpactCategory": {
        "type": "string",
        "description": "Categories of environmental impact values.",
        "enum": [
          "NUCLEAR_WASTE",
          "CARBON_DIOXIDE"
        ]
      },
      "EnvironmentalImpact": {
        "type": "object",
        "description": "Amount of waste produced/emitted per kWh.",
        "properties": {
          "category": {
            "description": "The environmental impact category of this value.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnvironmentalImpactCategory"
              }
            ]
          },
          "amount": {
            "description": "Amount of this portion in g/kWh.",
            "type": "number"
          }
        }
      },
      "EnergySourceCategory": {
        "description": "Categories of energy sources.",
        "type": "string",
        "enum": [
          "NUCLEAR",
          "GENERAL_FOSSIL",
          "COAL",
          "GAS",
          "GENERAL_GREEN",
          "SOLAR",
          "WIND",
          "WATER"
        ]
      },
      "EnergySource": {
        "description": "Key-value pairs (enum + percentage) of energy sources. All given values of all categories should add up to 100 percent.",
        "type": "object",
        "properties": {
          "source": {
            "description": "The type of energy source.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnergySourceCategory"
              }
            ]
          },
          "percentage": {
            "description": "Percentage of this source (0-100) in the mix.",
            "type": "number"
          }
        }
      },
      "EnergyMix": {
        "description": "This type is used to specify the energy mix and environmental impact of the supplied energy at a location or in a tariff.",
        "type": "object",
        "properties": {
          "is_green_energy": {
            "type": "boolean",
            "description": "True if 100% from regenerative sources. (CO2 and nuclear waste is zero)"
          },
          "energy_sources": {
            "description": "Key-value pairs (enum + percentage) of energy sources of this locationâ€™s tariff.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnergySource"
              }
            ]
          },
          "environ_impact": {
            "description": "Key-value pairs (enum + percentage) of nuclear waste and CO2 exhaust of this locationâ€™s tariff.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnvironmentalImpact"
              }
            ]
          },
          "supplier_name": {
            "type": "string",
            "description": "Name of the energy supplier, delivering the energy for this location or tariff.*",
            "example": "EESL"
          },
          "energy_product_name": {
            "type": "string",
            "description": "Name of the energy suppliers product/tariff plan used at this location.*",
            "example": "Eco-Power"
          }
        }
      },
      "Price": {
        "type": "object",
        "properties": {
          "excl_vat": {
            "description": "Price/Cost excluding VAT.",
            "type": "number"
          },
          "incl_vat": {
            "description": "Price/Cost including VAT.",
            "type": "number"
          }
        }
      },
      "CdrLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": 1234,
            "description": "Uniquely identifies the location. This field can never be changed, modified or renamed."
          },
          "name": {
            "type": "string",
            "description": "Display name of the location.",
            "example": "Delta Charger"
          },
          "address": {
            "type": "string",
            "description": "Street/block name and house number if available.",
            "example": "Block G, Minto Road"
          },
          "city": {
            "type": "string",
            "description": "City or town",
            "example": "New Delhi"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways donâ€™t have postal codes.",
            "example": "110055"
          },
          "state": {
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "example": "Delhi"
          },
          "country": {
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "IND"
          },
          "coordinates": {
            "description": "Coordinates of the location.",
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoLocation"
              }
            ]
          },
          "evse_id": {
            "type": "string",
            "example": 123,
            "description": "Uniquely identifies the EVSE. For example a database unique ID or the actual EVSE ID. This field can never be changed, modified or renamed. This is the technical identification of the EVSE, not to be used as human readable identification, use the field: evse_id for that."
          },
          "connector_id": {
            "type": "string",
            "example": 12,
            "description": "Identifier of the connector within the EVSE."
          },
          "connector_standard": {
            "description": "The standard of the installed connector.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorType"
              }
            ]
          },
          "connector_format": {
            "description": "The format (socket/cable) of the installed connector.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorFormat"
              }
            ]
          },
          "connector_power_type": {
            "$ref": "#/components/schemas/PowerType"
          }
        }
      },
      "ChargingPeriod": {
        "type": "object",
        "description": "A Charging Period consists of a start timestamp and a list of possible values that influence this period, for example: amount of energy charged this period, maximum current during this period etc.",
        "properties": {
          "start_date_time": {
            "type": "string",
            "description": "Start timestamp of the charging period. A period ends when the next period starts. The last period ends when the session ends.",
            "example": "2020-01-01T01:08:01.123"
          },
          "dimensions": {
            "type": "array",
            "description": "List of relevant values for this charging period.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CdrDimension"
                }
              ]
            }
          },
          "tariff_id": {
            "type": "string",
            "description": "Unique identifier of the Tariff that is relevant for this Charging Period. If not provided, no Tariff is relevant during this period.",
            "example": "t123"
          }
        }
      },
      "CdrDimension": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of CDR dimension.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CdrDimensionType"
              }
            ]
          },
          "volume": {
            "type": "number",
            "description": "Volume of the dimension consumed, measured according to the dimension type."
          }
        }
      },
      "CdrDimensionType": {
        "type": "string",
        "enum": [
          "CURRENT",
          "ENERGY",
          "ENERGY_EXPORT",
          "ENERGY_IMPORT",
          "MAX_CURRENT",
          "MIN_CURRENT",
          "MAX_POWER",
          "MIN_POWER",
          "PARKING_TIME",
          "POWER",
          "RESERVATION_TIME",
          "STATE_OF_CHARGE",
          "TIME"
        ]
      },
      "AuthMethod": {
        "type": "string",
        "enum": [
          "AUTH_REQUEST",
          "COMMAND",
          "WHITELIST"
        ]
      },
      "CdrToken": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "example": "uid123",
            "description": "Unique ID by which this Token can be identified. This is the field used by the CPOâ€™s system (RFID reader on the Charge Point) to identify this token. Currently, in most cases: type=RFID, this is the RFID hidden ID as read by the RFID reader, but that is not a requirement. If this is a type=APP_USER Token, it will be a unique, by the eMSP, generated ID."
          },
          "type": {
            "description": "Type of the token",
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenType"
              }
            ]
          },
          "contact_id": {
            "type": "string",
            "description": "Uniquely identifies the EV driver contract token within the eMSPâ€™s platform (and suboperator platforms).",
            "example": "121aaa"
          }
        }
      },
      "ChargingPreferences": {
        "type": "object",
        "description": "Contains the charging preferences of an EV driver.",
        "properties": {
          "profile_type": {
            "description": "Type of Smart Charging Profile selected by the driver. The ProfileType has to be supported at the Connector and for every supported ProfileType, a Tariff MUST be provided. This gives the EV driver the option between different pricing options.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileType"
              }
            ]
          },
          "departure_time": {
            "type": "string",
            "format": "DateTime",
            "example": "2020-08-27T17:45:09.2Z",
            "description": "Expected departure. The driver has given this Date/Time as expected departure moment. It is only an estimation and not necessarily the Date/Time of the actual departure."
          },
          "energy_need": {
            "type": "number",
            "description": "Requested amount of energy in kWh. The EV driver wants to have this amount of energy charged.",
            "example": 1
          },
          "discharge_allowed": {
            "type": "boolean",
            "description": "The driver allows their EV to be discharged when needed, as long as the other preferences are met: EV is charged with the preferred energy (energy_need) until the preferred departure moment (departure_time). Default if omitted: false"
          }
        }
      },
      "ChargingPreferencesResponse": {
        "type": "string",
        "enum": [
          "ACCEPTED",
          "DEPARTURE_REQUIRED",
          "ENERGY_NEED_REQUIRED",
          "NOT_POSSIBLE",
          "PROFILE_TYPE_NOT_SUPPORTED"
        ]
      },
      "ProfileType": {
        "type": "string",
        "enum": [
          "CHEAP",
          "FAST",
          "GREEN",
          "REGULAR"
        ]
      },
      "SessionStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "COMPLETED",
          "INVALID",
          "PENDING",
          "RESERVATION"
        ]
      },
      "SessionStartBody": {
        "type": "object",
        "properties": {
          "connector_id": {
            "type": "string"
          }
        }
      },
      "SessionStopBody": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string"
          }
        }
      },
      "SessionRateBody": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string",
            "example": 101
          },
          "rating": {
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        }
      },
      "SessionStart": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string",
            "example": 101
          },
          "connector_id": {
            "type": "string",
            "example": 1
          },
          "start_date_time": {
            "type": "string",
            "format": "DateTime",
            "example": "2020-03-09T10:17:09Z"
          },
          "end_date_time": {
            "type": "string",
            "format": "DateTime",
            "example": null
          },
          "status": {
            "$ref": "#/components/schemas/SessionStatus"
          }
        }
      },
      "SessionStop": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string",
            "example": 101
          },
          "connector_id": {
            "type": "string",
            "example": 1
          },
          "start_date_time": {
            "type": "string",
            "format": "DateTime",
            "example": "2020-03-09T10:17:09Z"
          },
          "end_date_time": {
            "type": "string",
            "format": "DateTime",
            "example": "2020-03-09T10:30:09Z"
          },
          "status": {
            "example": "COMPLETED",
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionStatus"
              }
            ]
          }
        }
      },
      "SignedData": {
        "type": "object",
        "description": "This class contains all the information of the signed data. Which encoding method is used, if needed, the public key and a list of signed values.",
        "properties": {
          "encoding_method": {
            "type": "string",
            "description": "The name of the encoding used in the SignedData field. This is the name given to the encoding by a company or group of companies. See note below."
          },
          "encoding_method_version": {
            "type": "integer",
            "description": "Version of the EncodingMethod (when applicable)"
          },
          "public_key": {
            "type": "string",
            "description": "Public key used to sign the data, base64 encoded."
          },
          "signed_values": {
            "description": "One or more signed values.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SignedValue"
              }
            ]
          },
          "url": {
            "type": "string",
            "description": "URL that can be shown to an EV driver. This URL gives the EV driver the possibility to check the signed data from a charging session."
          }
        }
      },
      "SignedValue": {
        "type": "object",
        "description": "This class contains the signed and the plain/unsigned data. By decoding the data, the receiver can check if the content has not been altered.",
        "properties": {
          "nature": {
            "type": "string",
            "description": "Nature of the value, in other words, the event this value belongs to. Possible values at moment of writing: - Start (value at the start of the Session) - End (signed value at the end of the Session) - Intermediate (signed values take during the Session, after Start, before End) Others might be added later."
          },
          "plain_data": {
            "type": "string",
            "description": "The unencoded string of data. The format of the content depends on the EncodingMethod field."
          },
          "signed_data": {
            "type": "string",
            "description": "Blob of signed data, base64 encoded. The format of the content depends on the EncodingMethod field."
          }
        }
      },
      "MMI-AdditionalAddressTokens": {
        "type": "object",
        "properties": {
          "bld_nme": {
            "type": "string",
            "example": "DC Complex"
          },
          "bld_num": {
            "type": "string",
            "example": "4A"
          },
          "eloc": {
            "type": "string",
            "example": "11AA5G"
          },
          "rd_nme": {
            "type": "string",
            "example": "Minto Road"
          },
          "vlg_nme": {
            "type": "string",
            "example": null
          },
          "sslc_nme": {
            "type": "string",
            "example": "Inner Circle"
          },
          "subl_nme": {
            "type": "string",
            "example": "Rajiv Chowk"
          },
          "loc_nme": {
            "type": "string",
            "example": "Connaught Place"
          },
          "sdb_nme": {
            "type": "string",
            "example": null
          },
          "dst_nme": {
            "type": "string",
            "example": "Central Delhi"
          },
          "entry_lat": {
            "type": "string",
            "example": 51.047599
          },
          "entry_lon": {
            "type": "string",
            "example": 3.729944
          }
        }
      },
      "MMI-AdditionalInfo": {
        "type": "object",
        "properties": {
          "brand_nme": {
            "type": "string",
            "example": "Honda"
          },
          "pay": {
            "type": "string",
            "example": "AC-40"
          },
          "pay_duration": {
            "type": "string",
            "example": "AC-1"
          },
          "free": {
            "type": "boolean"
          },
          "pay_mode": {
            "type": "string"
          },
          "rate_type": {
            "type": "string",
            "example": "Time"
          },
          "free_for": {
            "type": "string",
            "example": "Honda"
          },
          "paid": {
            "type": "string",
            "enum": [
              0,
              1,
              2
            ]
          },
          "rating": {
            "type": "string",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "mmi_auth": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://outpost.mapmyindia.com/api/security/oauth/token",
            "scopes": {
              "Read": "read authorization for API"
            }
          }
        }
      },
      "Authorization": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}
