{
  "openapi": "3.0.1",
  "info": {
    "title": "MapmyIndia Electric Vehicle & Charging Station APIs",
    "description": "<p><img alt=\"Charging Topology\" src=\"https://raw.githubusercontent.com/exploremapmyindia/eMSP/master/charging_topology.PNG\" height=350 width=700></p><p><i>Figure: Charging Topology schematic</i></p><h2>Security Type</h2> <p>This APIs follow OAuth2 based security. <b>To know more on how to create your authorization tokens, please click the `Authorize` button below. More details available <a href=https://www.mapmyindia.com/api/advanced-maps/doc/authentication-api.php>here</a></b> </br><li><a href=https://www.mapmyindia.com/api/login>Login/Sing Up</a> for API key and other access.<p></br>",
    "termsOfService": "https://www.mapmyindia.com/api/terms-&-conditions",
    "contact": {
      "name": "MapmyIndia API Support",
      "url": "https://www.mapmyindia.com/api/#f_cont",
      "email": "apisupport@mapmyindia.com"
    },
    "version": "v2.1.0"
  },
  "externalDocs": {
    "description": "Find out more about MapmyIndia APIs",
    "url": "https://www.mapmyindia.com/api/advanced-maps/doc/interactive-map-api"
  },
  "servers": [
    {
      "url": "http://explore-uat.mapmyindia.in/api",
      "description": "UAT"
    },
    {
      "url": "http://exp.mapmyindia.in/api",
      "description": "PreProd"
    },
    {
      "url": "https://explore.mapmyindia.com/api",
      "description": "Prod"
    }
  ],
  "tags": [
    {
      "name": "Location"
    },
    {
      "name": "Session"
    },
    {
      "name": "CDR"
    },
    {
      "name": "Tariff"
    }
  ],
  "paths": {
    "/cpo/{version}/locations": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Fetch a list of Locations, last updated between the {date_from} and {date_to} (paginated) from CPO.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "Only return Locations that have last_updated after or equal to this Date/Time (inclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "Only return Locations that have last_updated up to this Date/Time, but not including (exclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the first object returned. Default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of objects to GET.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/cpo/{version}/locations/{location_id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get a specific Location from CPO.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Id of the Location object to retrieve.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/cpo/{version}/locations/{evse_uid}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get a specific EVSE from CPO.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_uid",
            "in": "path",
            "description": "Id of the EVSE object to retrieve.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVSE"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/cpo/{version}/locations/{connector_id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get a specific Connector from CPO.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "Id of the Connector object to retrieve.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connector"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/emsp/{version}/locations/{country_code}/{party_id}/{location_id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieve a Location as it is stored in the eMSP system.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "path",
            "description": "Country code of the CPO requesting data from the eMSP system.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "description": "Party ID (Provider ID) of the CPO requesting data from the eMSP system.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "Id of the Location object to retrieve.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/emsp/{version}/locations/{country_code}/{party_id}/{evse_uid}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieve a EVSE as it is stored in the eMSP system.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "path",
            "description": "Country code of the CPO requesting data from the eMSP system.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "description": "Party ID (Provider ID) of the CPO requesting data from the eMSP system.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evse_uid",
            "in": "path",
            "description": "Id of the EVSE object to retrieve.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVSE"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/emsp/{version}/locations/{country_code}/{party_id}/{connector_id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Retrieve a Connector as it is stored in the eMSP system.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "in": "path",
            "description": "Country code of the CPO requesting data from the eMSP system.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "party_id",
            "in": "path",
            "description": "Party ID (Provider ID) of the CPO requesting data from the eMSP system.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "Id of the Connector object to retrieve.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connector"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Location": {
        "description": "The Location object describes the location and its properties where a group of EVSEs that belong together are installed. Typically, the Location object is the exact location of the group of EVSEs, but it can also be the entrance of a parking garage which contains these EVSEs. The exact way to reach each EVSE can be further specified by its own properties.",
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "example": "IN",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this Location."
          },
          "party_id": {
            "type": "string",
            "example": "INC",
            "description": "CPO ID of the CPO that 'owns' this Location (following the ISO- 15118 standard)."
          },
          "id": {
            "type": "string",
            "example": "LOC1",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms). This field can never be changed, modified or renamed."
          },
          "publish": {
            "type": "boolean"
          },
          "publish_allowed_to": {
            "description": "This field may only be used when the publish field is set to false Only owners of Tokens that match all the set fields of one PublishToken in the list are allowed to be shown this location.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PublishTokenType"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Display name of the location.",
            "example": "Delta Charger"
          },
          "address": {
            "type": "string",
            "description": "Street/block name and house number if available.",
            "example": "Block G, Minto Road"
          },
          "city": {
            "type": "string",
            "description": "City or town",
            "example": "New Delhi"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways donâ€™t have postal codes.",
            "example": "110055"
          },
          "state": {
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "example": "Delhi"
          },
          "country": {
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "IND"
          },
          "coordinates": {
            "description": "Coordinates of the location.",
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoLocation"
              }
            ]
          },
          "related_locations": {
            "description": "Geographical location of related points relevant to the user.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalGeoLocation"
              }
            ]
          },
          "parking_type": {
            "description": "The general type of parking at the charge point location.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ParkingType"
              }
            ]
          },
          "evses": {
            "type": "array",
            "description": "List of EVSEs that belong to this Location.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EVSE"
                }
              ]
            }
          },
          "directions": {
            "description": "Human-readable directions on how to reach the location.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayText"
              }
            ]
          },
          "operator": {
            "description": "Information of the operator. When not specified, the information retrieved from the Credentials module should be used instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetails"
              }
            ]
          },
          "suboperator": {
            "description": "Information of the suboperator if available.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetails"
              }
            ]
          },
          "owner": {
            "description": "Information of the owner if available.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessDetails"
              }
            ]
          },
          "facilities": {
            "type": "array",
            "description": "Optional list of facilities this charging location directly belongs to.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Facility"
                }
              ]
            }
          },
          "time_zone": {
            "type": "string",
            "description": "Representing the time zone of the location.",
            "example": "IST(GMT+5:30)"
          },
          "opening_times": {
            "description": "The times when the EVSEs at the location can be accessed for charging.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Hours"
              }
            ]
          },
          "charging_when_closed": {
            "type": "boolean",
            "description": "Indicates if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true"
          },
          "images": {
            "description": "Links to images related to the location such as photos or logos.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Image"
              }
            ]
          },
          "energy_mix": {
            "description": "Details on the energy supplied at this location.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnergyMix"
              }
            ]
          },
          "last_updated": {
            "type": "string",
            "format": "DateTime",
            "description": "Timestamp when this Location or one of its EVSEs or Connectors were last updated (or created).",
            "example": "2015-06-29T20:39:09"
          }
        }
      },
      "EVSE": {
        "type": "object",
        "description": "The EVSE object describes the part that controls the power supply to a single EV in a single session. It always belongs to a Location object. The object only contains directions to get from the location itself to the EVSE (i.e. floor, physical_reference or directions). When the directional properties of an EVSE are insufficient to reach the EVSE from the Location point, then it typically indicates that the EVSE should be put in a different Location object (sometimes with the same address but with different coordinates/directions). An EVSE object has a list of Connectors which can not be used simultaneously: only one connector per EVSE can be used at the time.",
        "properties": {
          "uid": {
            "description": "Uniquely identifies the EVSE within the CPOs platform (and suboperator platforms). For example a database ID or the actual \"EVSE ID\". This field can never be changed, modified or renamed. This is the \"technical\" identification of the EVSE, not to be used as \"human readable\" identification, use the field evse_id for that. This field is named uid instead of id, because id could be confused with evse_id which is an eMI3 defined field.",
            "example": "3256",
            "type": "string"
          },
          "evse_id": {
            "type": "string",
            "example": "BE*BEC*E041503001",
            "description": "Unique EVSE ID, if an evse_id is to be re-used in the real world, the evse_id can be removed from an EVSE object if the status is set to REMOVED."
          },
          "status": {
            "description": "Indicates the current status of the EVSE.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ]
          },
          "status_schedule": {
            "description": "Indicates a planned status update of the EVSE",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusSchedule"
              }
            ]
          },
          "capabilities": {
            "description": "List of functionalities that the EVSE is capable of.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Capability"
              }
            ]
          },
          "connectors": {
            "type": "array",
            "description": "List of available connectors on the EVSE.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Connector"
                }
              ]
            }
          },
          "floor_level": {
            "type": "string",
            "description": "Level on which the Charge Point is located (in garage buildings) in the locally displayed numbering scheme.",
            "example": 2
          },
          "coordinates": {
            "description": "Coordinates of the EVSE.",
            "allOf": [
              {
                "$ref": "#/components/schemas/GeoLocation"
              }
            ]
          },
          "physical_reference": {
            "description": "A number/string printed on the outside of the EVSE for visual identification.",
            "type": "string",
            "example": 3
          },
          "directions": {
            "description": "Multi-language human-readable directions when more detailed information on how to reach the EVSE from the Location is required.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayText"
              }
            ]
          },
          "parking_restrictions": {
            "description": "The restrictions that apply to the parking spot.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ParkingRestriction"
              }
            ]
          },
          "images": {
            "description": "Links to images related to the EVSE such as photos or logos.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Image"
              }
            ]
          },
          "last_updated": {
            "type": "string",
            "description": "Timestamp when this EVSE or one of its Connectors was last updated (or created).",
            "format": "DateTime",
            "example": "2015-06-29T20:39:09"
          }
        }
      },
      "Connector": {
        "description": "A Connector is the socket or cable and plug available for the EV to use. A single EVSE may provide multiple Connectors but only one of them can be in use at the same time. A Connector always belongs to an EVSE object.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the Connector within the EVSE. Two Connectors may have the same id as long as they do not belong to the same EVSE object.",
            "example": "1"
          },
          "standard": {
            "description": "The standard of the installed connector.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorType"
              }
            ]
          },
          "format": {
            "description": "The format (socket/cable) of the installed connector.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectorFormat"
              }
            ]
          },
          "power_type": {
            "$ref": "#/components/schemas/PowerType"
          },
          "max_voltage": {
            "type": "integer",
            "description": "Maximum voltage of the connector (line to neutral for AC_3_PHASE), in volt [V]. For example: DC Chargers might vary the voltage during charging when battery almost full.",
            "example": 920
          },
          "max_amperage": {
            "type": "integer",
            "description": "Maximum amperage of the connector, in ampere [A].",
            "example": 400
          },
          "max_electric_power": {
            "type": "integer",
            "description": "Maximum electric power that can be delivered by this connector, in Watts (W). When the maximum electric power is lower than the calculated value from voltage and amperage, this value should be set. For example: A DC Charge Point which can delivers up to 920V and up to 400A can be limited to a maximum of 150kW (max_electric_power = 150000). Depending on the car, it may supply max voltage or current, but not both at the same time. For AC Charge Points, the amount of phases used can also have influence on the maximum power.",
            "example": 150000
          },
          "tariff_ids": {
            "type": "string",
            "description": "Identifiers of the currently valid charging tariffs. Multiple tariffs are possible, but only one of each Tariff.type can be active at the same time. Tariffs with the same type are only allowed if they are not active at the same time: start_date_time and end_date_time period not overlapping. When preference-based smart charging is supported, one tariff for every possible ProfileType should be provided. These tell the user about the options they have at this Connector, and what the tariff is for every option. For a \"free of charge\" tariff, this field should be set and point to a defined \"free of charge\" tariff.",
            "example": 12
          },
          "terms_and_conditions": {
            "type": "string",
            "format": "URL",
            "description": "URL to the operatorâ€™s terms and conditions.",
            "example": "www.deltacharging.com/terms_and_conditions"
          },
          "last_updated": {
            "type": "string",
            "format": "DateTime",
            "example": "2015-06-29T20:39:09",
            "description": "Timestamp when this Connector was last updated (or created)."
          }
        }
      },
      "ConnectorType": {
        "type": "string",
        "enum": [
          "CHADEMO",
          "DOMESTIC_A",
          "DOMESTIC_B",
          "DOMESTIC_C",
          "DOMESTIC_D",
          "DOMESTIC_E",
          "DOMESTIC_F",
          "DOMESTIC_G",
          "DOMESTIC_H",
          "DOMESTIC_I",
          "DOMESTIC_J",
          "DOMESTIC_K",
          "DOMESTIC_L",
          "IEC_60309_2_single_16",
          "IEC_60309_2_three_16",
          "IEC_60309_2_three_32",
          "IEC_60309_2_three_64",
          "IEC_62196_T1",
          "IEC_62196_T1_COMBO",
          "IEC_62196_T2",
          "IEC_62196_T2_COMBO",
          "IEC_62196_T3A",
          "IEC_62196_T3C",
          "PANTOGRAPH_BOTTOM_ UP",
          "PANTOGRAPH_TOP_DOW N",
          "TESLA_R",
          "TESLA_S"
        ]
      },
      "ConnectorFormat": {
        "description": "The format of the connector, whether it is a socket or a plug.",
        "type": "string",
        "enum": [
          "SOCKET",
          "CABLE"
        ]
      },
      "Capability": {
        "description": "The capabilities of an EVSE.",
        "type": "string",
        "enum": [
          "CHARGING_PROFILE_CAPABLE",
          "CHARGING_PREFERENCES_CAPABLE",
          "CHIP_CARD_SUPPORT",
          "CONTACTLESS_CARD_SUPPORT",
          "CREDIT_CARD_PAYABLE",
          "DEBIT_CARD_PAYABLE",
          "PED_TERMINAL",
          "REMOTE_START_STOP_CAPABLE",
          "RESERVABLE",
          "RFID_READER",
          "TOKEN_GROUP_CAPABLE",
          "UNLOCK_CAPABLE"
        ]
      },
      "PublishTokenType": {
        "type": "object",
        "description": "Defines the set of values that identify a token to which a Location might be published. At least one of the following fields SHALL be set: uid, visual_number, or group_id. When uid is set, type SHALL also be set. When visual_number is set, issuer SHALL also be set.",
        "properties": {
          "uid": {
            "type": "string",
            "example": 12421,
            "description": "Unique ID by which this Token can be identified."
          },
          "type": {
            "description": "Type of the token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenType"
              }
            ]
          },
          "visual_number": {
            "description": "Visual readable number/identification as printed on the Token (RFID card).",
            "type": "string",
            "example": "12345-67"
          },
          "issuer": {
            "description": "Issuing company, most of the times the name of the company printed on the token (RFID card), not necessarily the eMSP.",
            "type": "string",
            "example": "NewMotion"
          },
          "group_id": {
            "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one.",
            "type": "string",
            "example": "123abc"
          }
        }
      },
      "TokenType": {
        "type": "string",
        "enum": [
          "RFID",
          "AD_HOC_USER",
          "APP_USER",
          "OTHER"
        ]
      },
      "GeoLocation": {
        "type": "object",
        "description": "This class defines the geo location of the Charge Point. The geodetic system to be used is WGS 84.",
        "properties": {
          "latitude": {
            "type": "string",
            "example": "51.047599",
            "description": "Latitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,2}\\.[0-9]{5,7}"
          },
          "longitude": {
            "type": "string",
            "example": "3.729944",
            "description": "Longitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,3}\\.[0-9]{5,7}"
          }
        }
      },
      "AdditionalGeoLocation": {
        "type": "object",
        "description": "This class defines an additional geo location that is relevant for the Charge Point. The geodetic system to be used is WGS 84.",
        "properties": {
          "latitude": {
            "type": "string",
            "example": "51.047599",
            "description": "Latitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,2}\\.[0-9]{5,7}"
          },
          "longitude": {
            "type": "string",
            "example": "3.729944",
            "description": "Longitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,3}\\.[0-9]{5,7}"
          }
        }
      },
      "DisplayText": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "example": "en"
          },
          "text": {
            "type": "string",
            "example": "Standard Tariff"
          }
        }
      },
      "ParkingType": {
        "type": "string",
        "enum": [
          "PARKING_LOT",
          "ON_STREET",
          "ALONG_MOTORWAY",
          "PARKING_GARAGE",
          "UNDERGROUND_GARAGE",
          "ON_DRIVEWAY"
        ]
      },
      "BusinessDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the operator.",
            "example": "Delta"
          },
          "website": {
            "type": "string",
            "example": "www.deltacharging.in",
            "description": "Link to the operatorâ€™s website."
          },
          "logo": {
            "description": "Image link to the operatorâ€™s logo.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Image"
              }
            ]
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "url": {
            "description": "URL from where the image data can be fetched through a web browser.",
            "type": "string",
            "example": "www.deltacharging.in/image/abc.png"
          },
          "thumbnail": {
            "type": "string",
            "description": "URL from where a thumbnail of the image can be fetched through a webbrowser.",
            "example": "www.deltacharging.in/image/abcthumbnail.png"
          },
          "category": {
            "description": "Describes what the image is used for.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageCategory"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "Image type like: gif, jpeg, png, svg.",
            "example": "png"
          },
          "width": {
            "type": "integer",
            "description": "Width of the full scale image.",
            "example": 100
          },
          "height": {
            "type": "integer",
            "description": "Height of the full scale image.",
            "example": 50
          }
        }
      },
      "ImageCategory": {
        "type": "string",
        "enum": [
          "CHARGER",
          "ENTRANCE",
          "LOCATION",
          "NETWORK",
          "OPERATOR",
          "OTHER",
          "OWNER"
        ]
      },
      "StatusSchedule": {
        "description": "This type is used to schedule status periods in the future. The eMSP can provide this information to the EV user for trip planning purposes. A period MAY have no end. Example: \"This station will be running as of tomorrow. Today it is still planned and under construction.\"",
        "type": "object",
        "properties": {
          "period_begin": {
            "type": "string",
            "format": "datetime",
            "example": "2015-03-16T10:10:02Z"
          },
          "period_end": {
            "type": "string",
            "format": "datetime",
            "example": "2015-03-18T08:12:01Z"
          },
          "status": {
            "description": "Status value during the scheduled period.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ]
          }
        }
      },
      "Status": {
        "description": "Status of an EVSE",
        "type": "string",
        "enum": [
          "AVAILABLE",
          "BLOCKED",
          "CHARGING",
          "INOPERATIVE",
          "OUTOFORDER",
          "PLANNED",
          "REMOVED",
          "RESERVED",
          "UNKNOWN"
        ]
      },
      "RegularHours": {
        "description": "Regular recurring operation or access hours.",
        "type": "array",
        "items": {
          "properties": {
            "weekday": {
              "type": "integer",
              "description": "Number of day in the week, from Monday (1) till Sunday (7)",
              "example": 1
            },
            "period_begin": {
              "type": "string",
              "description": "Begin of the regular period, in local time, given in hours and minutes. Must be in 24h format with leading zeros. Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9].",
              "example": "08:00"
            },
            "period_end": {
              "type": "string",
              "description": "End of the regular period, in local time, syntax as for period_begin. Must be later than period_begin.",
              "example": "20:00"
            }
          }
        }
      },
      "PowerType": {
        "type": "string",
        "enum": [
          "AC_1_PHASE",
          "AC_3_PHASE",
          "DC"
        ]
      },
      "ParkingRestriction": {
        "type": "string",
        "enum": [
          "EV_ONLY",
          "PLUGGED",
          "DISABLED",
          "CUSTOMERS",
          "MOTORCYCLES"
        ]
      },
      "ExceptionalPeriod": {
        "type": "array",
        "description": "Specifies one exceptional period for opening or access hours.",
        "items": {
          "properties": {
            "period_begin": {
              "type": "string",
              "format": "datetime",
              "description": "Begin of the exception. In UTC, time_zone field can be used to convert to local time.",
              "example": "2015-03-16T10:10:02Z"
            },
            "period_end": {
              "type": "string",
              "format": "datetime",
              "example": "2015-03-18T08:12:01Z",
              "description": "End of the exception. In UTC, time_zone field can be used to convert to local time."
            }
          }
        }
      },
      "Hours": {
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean"
          },
          "regular_hours": {
            "description": "Regular hours, weekday-based. Only to be used if twentyfourseven=false, then this field needs to contain at least one RegularHours object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RegularHours"
              }
            ]
          },
          "exceptional_openings": {
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is operating/accessible. Additional to regular_hours. May overlap regular rules.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExceptionalPeriod"
              }
            ]
          },
          "exceptional_closings": {
            "description": "Exceptions for specified calendar dates, time-range based. Periods the station is not operating/accessible. Overwriting regular_hours and exceptional_openings. Should not overlap exceptional_openings.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExceptionalPeriod"
              }
            ]
          }
        }
      },
      "Facility": {
        "type": "string",
        "enum": [
          "HOTEL",
          "RESTAURANT",
          "CAFE",
          "MALL",
          "SUPERMARKET",
          "SPORT",
          "RECREATION_AREA",
          "NATURE",
          "MUSEUM",
          "BIKE_SHARING",
          "BUS_STOP",
          "TAXI_STAND",
          "TRAM_STOP",
          "METRO_STATION",
          "TRAIN_STATION",
          "AIRPORT",
          "PARKING_LOT",
          "CARPOOL_PARKING",
          "FUEL_STATION",
          "WIFI"
        ]
      },
      "EnvironmentalImpactCategory": {
        "type": "string",
        "description": "Categories of environmental impact values.",
        "enum": [
          "NUCLEAR_WASTE",
          "CARBON_DIOXIDE"
        ]
      },
      "EnvironmentalImpact": {
        "type": "object",
        "description": "Amount of waste produced/emitted per kWh.",
        "properties": {
          "category": {
            "description": "The environmental impact category of this value.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnvironmentalImpactCategory"
              }
            ]
          },
          "amount": {
            "description": "Amount of this portion in g/kWh.",
            "type": "number"
          }
        }
      },
      "EnergySourceCategory": {
        "description": "Categories of energy sources.",
        "type": "string",
        "enum": [
          "NUCLEAR",
          "GENERAL_FOSSIL",
          "COAL",
          "GAS",
          "GENERAL_GREEN",
          "SOLAR",
          "WIND",
          "WATER"
        ]
      },
      "EnergySource": {
        "description": "Key-value pairs (enum + percentage) of energy sources. All given values of all categories should add up to 100 percent.",
        "type": "object",
        "properties": {
          "source": {
            "description": "The type of energy source.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnergySourceCategory"
              }
            ]
          },
          "percentage": {
            "description": "Percentage of this source (0-100) in the mix.",
            "type": "number"
          }
        }
      },
      "EnergyMix": {
        "description": "This type is used to specify the energy mix and environmental impact of the supplied energy at a location or in a tariff.",
        "type": "object",
        "properties": {
          "is_green_energy": {
            "type": "boolean",
            "description": "True if 100% from regenerative sources. (CO2 and nuclear waste is zero)"
          },
          "energy_sources": {
            "description": "Key-value pairs (enum + percentage) of energy sources of this locationâ€™s tariff.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnergySource"
              }
            ]
          },
          "environ_impact": {
            "description": "Key-value pairs (enum + percentage) of nuclear waste and CO2 exhaust of this locationâ€™s tariff.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnvironmentalImpact"
              }
            ]
          },
          "supplier_name": {
            "type": "string",
            "description": "Name of the energy supplier, delivering the energy for this location or tariff.*"
          },
          "energy_product_name": {
            "type": "string",
            "description": "Name of the energy suppliers product/tariff plan used at this location.*"
          }
        }
      }
    },
    "securitySchemes": {
      "mmi_auth": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://outpost.mapmyindia.com/api/security/oauth/token",
            "scopes": {
              "Read": "read authorization for API"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
