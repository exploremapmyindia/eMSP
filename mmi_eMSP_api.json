{
  "openapi": "3.0.1",
  "info": {
    "title": "MapmyIndia Electric Vehicle & Charging Station APIs",
    "description": "<h2>Security Type</h2> <p>This APIs follow OAuth2 based security. <b>To know more on how to create your authorization tokens, please click the `Authorize` button below. More details available <a href=https://www.mapmyindia.com/api/advanced-maps/doc/authentication-api.php>here</a></b> </br><li><a href=https://www.mapmyindia.com/api/login>Login/Sing Up</a> for API key and other access.<p></br>",
    "termsOfService": "https://www.mapmyindia.com/api/terms-&-conditions",
    "contact": {
      "name": "MapmyIndia API Support",
      "url": "https://www.mapmyindia.com/api/#f_cont",
      "email": "apisupport@mapmyindia.com"
    },
    "version": "v2.1.0"
  },
  "externalDocs": {
    "description": "Find out more about MapmyIndia APIs",
    "url": "https://www.mapmyindia.com/api/advanced-maps/doc/interactive-map-api"
  },
  "servers": [
    {
      "url": "http://explore-uat.mapmyindia.in/api",
      "description": "UAT"
    },
    {
      "url": "http://exp.mapmyindia.in/api",
      "description": "PreProd"
    },
    {
      "url": "https://explore.mapmyindia.com/api",
      "description": "Prod"
    }
  ],
  "tags": [
    {
      "name": "Location"
    },
    {
      "name": "Session"
    },
    {
      "name": "CDR"
    },
    {
      "name": "Tariff"
    }
  ],
  "paths": {
    "/{version}/cpo/locations": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Fetch a list of Locations, last updated between the {date_from} and {date_to} (paginated) from CPO.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "version of the API.",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "Only return Locations that have last_updated after or equal to this Date/Time (inclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "Only return Locations that have last_updated up to this Date/Time, but not including (exclusive).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset of the first object returned. Default is 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of objects to GET.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/location"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "location": {
        "description": "The Location object describes the location and its properties where a group of EVSEs that belong together are installed. Typically, the Location object is the exact location of the group of EVSEs, but it can also be the entrance of a parking garage which contains these EVSEs. The exact way to reach each EVSE can be further specified by its own properties.",
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "example": "IN",
            "description": "ISO-3166 alpha-2 country code of the CPO that 'owns' this Location."
          },
          "party_id": {
            "type": "string",
            "example": "INC",
            "description": "CPO ID of the CPO that 'owns' this Location (following the ISO- 15118 standard)."
          },
          "id": {
            "type": "string",
            "example": "LOC1",
            "description": "Uniquely identifies the location within the CPOs platform (and suboperator platforms). This field can never be changed, modified or renamed."
          },
          "publish": {
            "type": "boolean",
            "example": false
          },
          "publish_allowed_to": {
            "type": "array",
            "description": "This field may only be used when the publish field is set to false Only owners of Tokens that match all the set fields of one PublishToken in the list are allowed to be shown this location.",
            "items": {
              "properties": {
                "uid": {
                  "type": "string",
                  "example": 12421,
                  "description": "Unique ID by which this Token can be identified."
                },
                "type": {
                  "description": "Type of the token.",
                  "type": "string",
                  "enum": [
                    "RFID",
                    "AD_HOC_USER",
                    "APP_USER",
                    "OTHER"
                  ]
                },
                "visual_number": {
                  "description": "Visual readable number/identification as printed on the Token (RFID card).",
                  "type": "string",
                  "example": "12345-67"
                },
                "issuer": {
                  "description": "Issuing company, most of the times the name of the company printed on the token (RFID card), not necessarily the eMSP.",
                  "type": "string",
                  "example": "NewMotion"
                },
                "group_id": {
                  "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one.",
                  "type": "string",
                  "example": "123abc"
                }
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Display name of the location.",
            "example": "Delta Charger"
          },
          "address": {
            "type": "string",
            "description": "Street/block name and house number if available.",
            "example": "Block G, Minto Road"
          },
          "city": {
            "type": "string",
            "description": "City or town",
            "example": "New Delhi"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal code of the location, may only be omitted when the location has no postal code: in some countries charging locations at highways donâ€™t have postal codes.",
            "example": "110055"
          },
          "state": {
            "type": "string",
            "description": "State or province of the location, only to be used when relevant.",
            "example": "Delhi"
          },
          "country": {
            "type": "string",
            "description": "ISO 3166-1 alpha-3 code for the country of this location.",
            "example": "IND"
          },
          "coordinates": {
            "type": "object",
            "description": "Coordinates of the location.",
            "properties": {
              "latitude": {
                "type": "string",
                "example": "51.047599",
                "description": "Latitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,2}\\.[0-9]{5,7}"
              },
              "longitude": {
                "type": "string",
                "example": "3.729944",
                "description": "Longitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,3}\\.[0-9]{5,7}"
              }
            }
          },
          "related_locations": {
            "description": "Geographical location of related points relevant to the user.",
            "type": "object",
            "properties": {
              "latitude": {
                "type": "string",
                "example": "51.047599",
                "description": "Latitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,2}\\.[0-9]{5,7}"
              },
              "longitude": {
                "type": "string",
                "example": "3.729944",
                "description": "Longitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,3}\\.[0-9]{5,7}"
              }
            }
          },
          "parking_type": {
            "type": "string",
            "enum": [
              "PARKING_LOT",
              "ON_STREET",
              "ALONG_MOTORWAY",
              "PARKING_GARAGE",
              "UNDERGROUND_GARAGE",
              "ON_DRIVEWAY"
            ]
          }
        }
      },
      "evse": {
        "type": "string",
        "description": "The EVSE object describes the part that controls the power supply to a single EV in a single session. It always belongs to a Location object. The object only contains directions to get from the location itself to the EVSE (i.e. floor, physical_reference or directions). When the directional properties of an EVSE are insufficient to reach the EVSE from the Location point, then it typically indicates that the EVSE should be put in a different Location object (sometimes with the same address but with different coordinates/directions). An EVSE object has a list of Connectors which can not be used simultaneously: only one connector per EVSE can be used at the time.",
        "properties": {
          "uid": {
            "description": "Uniquely identifies the EVSE within the CPOs platform (and suboperator platforms). For example a database ID or the actual \"EVSE ID\". This field can never be changed, modified or renamed. This is the \"technical\" identification of the EVSE, not to be used as \"human readable\" identification, use the field evse_id for that. This field is named uid instead of id, because id could be confused with evse_id which is an eMI3 defined field.",
            "example": "3256",
            "type": "string"
          },
          "evse_id": {
            "type": "string",
            "example": "BE*BEC*E041503001",
            "description": "Unique EVSE ID, if an evse_id is to be re-used in the real world, the evse_id can be removed from an EVSE object if the status is set to REMOVED."
          },
          "status": {
            "description": "Indicates the current status of the EVSE.",
            "type": "string",
            "enum": [
              "AVAILABLE",
              "BLOCKED",
              "CHARGING",
              "INOPERATIVE",
              "OUTOFORDER",
              "PLANNED",
              "REMOVED",
              "RESERVED",
              "UNKNOWN"
            ]
          },
          "capabilities": {
            "description": "List of functionalities that the EVSE is capable of.",
            "type": "string",
            "enum": [
              "CHARGING_PROFILE_CAPABLE",
              "CHARGING_PREFERENCES_CAPABLE",
              "CHIP_CARD_SUPPORT",
              "CONTACTLESS_CARD_SUPPORT",
              "CREDIT_CARD_PAYABLE",
              "DEBIT_CARD_PAYABLE",
              "PED_TERMINAL",
              "REMOTE_START_STOP_CAPABLE",
              "RESERVABLE",
              "RFID_READER",
              "TOKEN_GROUP_CAPABLE",
              "UNLOCK_CAPABLE"
            ]
          }
        }
      },
      "connectors": {
        "description": "A Connector is the socket or cable and plug available for the EV to use. A single EVSE may provide multiple Connectors but only one of them can be in use at the same time. A Connector always belongs to an EVSE object.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the Connector within the EVSE. Two Connectors may have the same id as long as they do not belong to the same EVSE object.",
            "example": "1"
          },
          "standard": {
            "description": "The standard of the installed connector.",
            "type": "string",
            "example": "IEC_62196_T2"
          }
        }
      },
      "PublishTokenType": {
        "type": "object",
        "description": "Defines the set of values that identify a token to which a Location might be published. At least one of the following fields SHALL be set: uid, visual_number, or group_id. When uid is set, type SHALL also be set. When visual_number is set, issuer SHALL also be set.",
        "properties": {
          "uid": {
            "type": "string",
            "example": 12421,
            "description": "Unique ID by which this Token can be identified."
          },
          "type": {
            "description": "Type of the token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenType"
              }
            ]
          },
          "visual_number": {
            "description": "Visual readable number/identification as printed on the Token (RFID card).",
            "type": "string",
            "example": "12345-67"
          },
          "issuer": {
            "description": "Issuing company, most of the times the name of the company printed on the token (RFID card), not necessarily the eMSP.",
            "type": "string",
            "example": "NewMotion"
          },
          "group_id": {
            "description": "This ID groups a couple of tokens. This can be used to make two or more tokens work as one.",
            "type": "string",
            "example": "123abc"
          }
        }
      },
      "TokenType": {
        "type": "string",
        "enum": [
          "RFID",
          "AD_HOC_USER",
          "APP_USER",
          "OTHER"
        ]
      },
      "GeoLocation": {
        "type": "object",
        "description": "This class defines the geo location of the Charge Point. The geodetic system to be used is WGS 84.",
        "properties": {
          "latitude": {
            "type": "string",
            "example": "51.047599",
            "description": "Latitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,2}\\.[0-9]{5,7}"
          },
          "longitude": {
            "type": "string",
            "example": "3.729944",
            "description": "Longitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,3}\\.[0-9]{5,7}"
          }
        }
      },
      "AdditionalGeoLocation": {
        "type": "object",
        "description": "This class defines an additional geo location that is relevant for the Charge Point. The geodetic system to be used is WGS 84.",
        "properties": {
          "latitude": {
            "type": "string",
            "example": "51.047599",
            "description": "Latitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,2}\\.[0-9]{5,7}"
          },
          "longitude": {
            "type": "string",
            "example": "3.729944",
            "description": "Longitude of the point in decimal degree. Decimal separator: \".\" Regex: -?[0-9]{1,3}\\.[0-9]{5,7}"
          }
        }
      },
      "DisplayText": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "example": "en"
          },
          "text": {
            "type": "string",
            "example": "Standard Tariff"
          }
        }
      },
      "ParkingType": {
        "type": "string",
        "enum": [
          "PARKING_LOT",
          "ON_STREET",
          "ALONG_MOTORWAY",
          "PARKING_GARAGE",
          "UNDERGROUND_GARAGE",
          "ON_DRIVEWAY"
        ]
      },
      "BusinessDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the operator.",
            "example": "Delta"
          },
          "website": {
            "type": "string",
            "example": "www.deltacharging.in",
            "description": "Link to the operatorâ€™s website."
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "url": {
            "description": "URL from where the image data can be fetched through a web browser.",
            "type": "string",
            "example": "www.deltacharging.in/image/abc.png"
          },
          "thumbnail": {
            "type": "string",
            "description": "URL from where a thumbnail of the image can be fetched through a webbrowser.",
            "example": "www.deltacharging.in/image/abcthumbnail.png"
          },
          "category": {
            "description": "Describes what the image is used for.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageCategory"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "Image type like: gif, jpeg, png, svg.",
            "example": "png"
          },
          "width": {
            "type": "integer",
            "description": "Width of the full scale image.",
            "example": 100
          },
          "height": {
            "type": "integer",
            "description": "Height of the full scale image.",
            "example": 50
          }
        }
      },
      "ImageCategory": {
        "type": "string",
        "enum": [
          "CHARGER",
          "ENTRANCE",
          "LOCATION",
          "NETWORK",
          "OPERATOR",
          "OTHER",
          "OWNER"
        ]
      },
      "StatusSchedule": {
        "description": "This type is used to schedule status periods in the future. The eMSP can provide this information to the EV user for trip planning purposes. A period MAY have no end. Example: \"This station will be running as of tomorrow. Today it is still planned and under construction.\"",
        "type": "object",
        "properties": {
          "period_begin": {
            "type": "string",
            "format": "datetime",
            "example": "2015-03-16T10:10:02Z"
          },
          "period_end": {
            "type": "string",
            "format": "datetime",
            "example": "2015-03-18T08:12:01Z"
          },
          "status": {
            "description": "Status value during the scheduled period.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ]
          }
        }
      },
      "Status": {
        "description": "Status of an EVSE",
        "type": "string",
        "enum": [
          "AVAILABLE",
          "BLOCKED",
          "CHARGING",
          "INOPERATIVE",
          "OUTOFORDER",
          "PLANNED",
          "REMOVED",
          "RESERVED",
          "UNKNOWN"
        ]
      },
      "RegularHours": {
        "description": "Regular recurring operation or access hours.",
        "type": "array",
        "items": {
          "properties": {
            "weekday": {
              "type": "integer",
              "description": "Number of day in the week, from Monday (1) till Sunday (7)",
              "example": 1
            },
            "period_begin": {
              "type": "string",
              "description": "Begin of the regular period, in local time, given in hours and minutes. Must be in 24h format with leading zeros. Hour/Minute separator: \":\" Regex: ([0-1][0-9]|2[0-3]):[0-5][0-9].",
              "example": "08:00"
            },
            "period_end": {
              "type": "string",
              "description": "End of the regular period, in local time, syntax as for period_begin. Must be later than period_begin.",
              "example": "20:00"
            }
          }
        }
      },
      "PowerType": {
        "type": "string",
        "enum": [
          "AC_1_PHASE",
          "AC_3_PHASE",
          "DC"
        ]
      },
      "ParkingRestriction": {
        "type": "string",
        "enum": [
          "EV_ONLY",
          "PLUGGED",
          "DISABLED",
          "CUSTOMERS",
          "MOTORCYCLES"
        ]
      },
      "ExceptionalPeriod": {
        "type": "object",
        "description": "Specifies one exceptional period for opening or access hours.",
        "properties": {
          "period_begin": {
            "type": "string",
            "format": "datetime",
            "description": "Begin of the exception. In UTC, time_zone field can be used to convert to local time.",
            "example": "2015-03-16T10:10:02Z"
          },
          "period_end": {
            "type": "string",
            "format": "datetime",
            "example": "2015-03-18T08:12:01Z",
            "description": "End of the exception. In UTC, time_zone field can be used to convert to local time."
          }
        }
      },
      "Hours": {
        "type": "object",
        "properties": {
          "twentyfourseven": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "mmi_auth": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://outpost.mapmyindia.com/api/security/oauth/token",
            "scopes": {
              "Read": "read authorization for API"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
